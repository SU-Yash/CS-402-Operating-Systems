#
# This is the Makefile that can be used to create the "listtest" executable
# To create "listtest" executable, do:
#	make listtest
#
listtest: listtest2.o my402list.o
	gcc -o listtest2 -g listtest2.o my402list.o

listtest2.o: listtest2.c my402list.h
	gcc -g -c -Wall listtest2.c

my402list.o: my402list.c my402list.h
	gcc -g -c -Wall my402list.c

clean:
	rm -f *.o listtest2


#
# This is the Makefile that can be used to create the "listtest" executable
# To create "listtest" executable, do:
#	make listtest
#
warmup1: warmup1.o my402list.o
	gcc -o warmup1 -g warmup1.o my402list.o

warmup1.o: warmup1.c my402list.h
	gcc -g -c -Wall warmup1.c

my402list.o: my402list.c my402list.h
	gcc -g -c -Wall my402list.c

clean:
	rm -f *.o warmup1




#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "cs402.h"

#include "my402list.h"


int main(int argc, char *argv[])
{
	My402List list;
	//Initialize
	My402ListInit(&list);
	printf("List Initialized\n");

	//Check if Empty
    int s = My402ListEmpty(&list);
    printf("Empty check: %d\n", s);

    //Check for length
    s = My402ListLength(&list);
    printf("Length: %d\n", s);

    //Append first element
    s = My402ListAppend(&list, (void *)10); 
    printf("Appended: %d\n", s);
    printf("Length: %d\n", My402ListLength(&list));
    printf("anchor->next: %d\n", (int)list.anchor.next->obj);
    printf("anchor->prev: %d\n", (int)list.anchor.prev->obj);

    s = My402ListEmpty(&list);
    printf("Empty check: %d\n", s);

    //Append
    s = My402ListAppend(&list, (void *)12); 
    printf("Appended: %d\n", s);
    printf("Length: %d\n", My402ListLength(&list));
    printf("anchor->next %d\n", (int)list.anchor.next->obj);
    printf("anchor->prev %d\n", (int)list.anchor.prev->obj);

    s = My402ListEmpty(&list);
    printf("Empty check: %d\n", s);

    //Prepend first element
    s = My402ListPrepend(&list, (void *)20); 
    printf("Prepended: %d\n", s);
    printf("Length: %d\n", My402ListLength(&list));
    printf("anchor->next %d\n", (int)list.anchor.next->obj);
    printf("anchor->prev %d\n", (int)list.anchor.prev->obj);

    s = My402ListEmpty(&list);
    printf("Empty check: %d\n", s);

    //Prepend
    s = My402ListPrepend(&list, (void *)22); 
    printf("Prepended: %d\n", s);
    printf("Length: %d\n", My402ListLength(&list));
    printf("anchor->next %d\n", (int)list.anchor.next->obj);
    printf("anchor->prev %d\n", (int)list.anchor.prev->obj);

    s = My402ListEmpty(&list);
    printf("Empty check: %d\n", s);

    My402ListElem *t;

    //First Element
    t = My402ListFirst(&list); 
    printf("First: %d\n", (int)t->obj);

    //Last Element
    t = My402ListLast(&list);
    printf("Last: %d\n", (int)t->obj);

    //Next Element
    t = My402ListNext(&list, list.anchor.next); 
    printf("Next to firstElem: %d\n", (int)t->obj);

    //Next to last element
    t = My402ListNext(&list, list.anchor.prev); 
    if (t != NULL){
    	printf("lastElem->next: %d\n", (int)t->obj);
    }
    else{
    	printf("NULL\n");
    }

    //Prev element
    t = My402ListPrev(&list, list.anchor.prev); 
    printf("Prev to lastElem: %d\n", (int)t->obj);

    //Prev to first element
    t = My402ListPrev(&list, list.anchor.next); 
    if (t != NULL){
    	printf("firstElem->prev: %d\n", (int)t->obj);
    }
    else{
    	printf("NULL\n");
    }

    //Find element which is present
    t = My402ListFind(&list, (void *)12); 
    printf("Element found: %d\n", (int)t->obj);

    //Find element which is not present
    t = My402ListFind(&list, (void *)45); 
    if (t == NULL){
    	printf("Element not found\n");
    }
    else{
    	printf("ERROR\n");
    }

    //Insert after an element
    s = My402ListInsertAfter(&list, (void *)50, list.anchor.next);
    printf("Inserted: %d\n", s);
    printf("Length: %d\n", My402ListLength(&list));
    printf("anchor->next->next %d\n", (int)list.anchor.next->next->obj);


    //Insert before an element
    s = My402ListInsertBefore(&list, (void *)50, list.anchor.prev);
    printf("Inserted: %d\n", s);
    printf("Length: %d\n", My402ListLength(&list));
    printf("anchor->prev->prev %d\n", (int)list.anchor.prev->prev->obj);


    //Unlink an element
    printf("Before unlinking: anchor->next %d\n", (int)list.anchor.next->obj);
    printf("Before unlinking: anchor->next->next %d\n", (int)list.anchor.next->next->obj);
	My402ListUnlink(&list, list.anchor.next);
	printf("Unlinked");
    printf("Length: %d\n", My402ListLength(&list));
    printf("anchor->next %d\n", (int)list.anchor.next->obj);

    //Unlink all the elements
    My402ListUnlinkAll(&list);
	printf("Unlinked All\n");
    printf("Length: %d\n", My402ListLength(&list));

    return(0);
}



#include <stdio.h>
#include <stdlib.h>
#include "my402list.h"

int My402ListLength(My402List *list){
	return list->num_members;
}

int My402ListInit(My402List *list){
	list->num_members = 0;
	list->anchor.obj = NULL;
	list->anchor.next = &list->anchor;
	list->anchor.prev = &list->anchor;
	return 0;
}

int My402ListEmpty(My402List *list){
	if (list->num_members == 0){
		return TRUE;
	}
	return FALSE;
}

int My402ListAppend(My402List *list, void *elem){
	My402ListElem *newElem = (My402ListElem *)malloc(sizeof(My402ListElem));
	newElem->obj = elem;
	//When to return FALSE
	if(My402ListEmpty(list)){
		newElem->next = &list->anchor;
		newElem->prev = &list->anchor;
		list->anchor.next = newElem;
		list->anchor.prev = newElem;
		list->num_members = list->num_members + 1;
	}
	else{
		My402ListElem *lastElem;
		lastElem = list->anchor.prev;
		lastElem->next = newElem;
		newElem->prev = lastElem;

		list->anchor.prev = newElem;
		newElem->next = &list->anchor;
		list->num_members = list->num_members + 1;
	}
	return TRUE;
}

int My402ListPrepend(My402List *list, void *elem){
	My402ListElem *newElem = (My402ListElem *)malloc(sizeof(My402ListElem));
	newElem->obj = elem;
	//When to return FALSE
	if(My402ListEmpty(list)){
		newElem->next = &list->anchor;
		newElem->prev = &list->anchor;
		list->anchor.next = newElem;
		list->anchor.prev = newElem;
		list->num_members = list->num_members + 1;
	}
	else{
		My402ListElem *firstElem;
		firstElem = list->anchor.next;
		firstElem->prev = newElem;
		newElem->next = firstElem;

		list->anchor.next = newElem;
		newElem->prev = &list->anchor;
		list->num_members = list->num_members + 1;
	}
	return TRUE;
}

My402ListElem* My402ListFirst(My402List *list){
	if(My402ListEmpty(list)){
		return NULL;
	}
	return list->anchor.next;
}

My402ListElem* My402ListLast(My402List *list){
	if(My402ListEmpty(list)){
		return NULL;
	}
	return list->anchor.prev;
}

My402ListElem* My402ListNext(My402List *list, My402ListElem *elem){
	if(My402ListLast(list) == elem){
		return NULL;
	}
	return elem->next;
}

My402ListElem* My402ListPrev(My402List *list, My402ListElem *elem){
	if(My402ListFirst(list) == elem){
		return NULL;
	}
	return elem->prev;
}

My402ListElem* My402ListFind(My402List *list, void *obj){
	My402ListElem *currElem=NULL;

        for (currElem=My402ListFirst(list);
                currElem != NULL;
                currElem=My402ListNext(list, currElem)) {
            if(currElem->obj == obj){
            	return currElem;
            }
     	}
     	return NULL;
}

int My402ListInsertAfter(My402List *list, void *obj, My402ListElem *elem){
	if(elem == NULL){
		My402ListAppend(list, obj);
		return TRUE;
	}
	
	/*
	if(nextElem == NULL){
		return FALSE;
	}*/

	else{
		My402ListElem *nextElem;
		nextElem = My402ListNext(list, elem);
		
		My402ListElem *newElem = (My402ListElem *)malloc(sizeof(My402ListElem));
		newElem->obj = obj;
		
		elem->next = newElem;
		nextElem->prev = newElem;

		newElem->prev = elem;
		newElem->next = nextElem;
		list->num_members = list->num_members + 1;
		return TRUE;
	}
}

int My402ListInsertBefore(My402List *list, void *obj, My402ListElem *elem){
	if(elem == NULL){
		My402ListPrepend(list, obj);
		return TRUE;
	}

	/*
	if(prevElem == NULL){
		return FALSE;
	}*/

	else{
		My402ListElem *prevElem;
		prevElem = My402ListPrev(list, elem);
		
		My402ListElem *newElem = (My402ListElem *)malloc(sizeof(My402ListElem));
		newElem->obj = obj;
		
		elem->prev = newElem;
		prevElem->next = newElem;

		newElem->prev = prevElem;
		newElem->next = elem;
		list->num_members = list->num_members + 1;
		return TRUE;
	}
}

void My402ListUnlink(My402List *list, My402ListElem *elem){
	My402ListElem *prevElem, *nextElem;
	prevElem = elem->prev;
	nextElem = elem->next;

	prevElem->next = nextElem;
	nextElem->prev = prevElem;
	list->num_members = list->num_members - 1;

	free(elem);
}

void My402ListUnlinkAll(My402List *list){
	My402ListElem *currElem, *nextElem;
	currElem=My402ListFirst(list);

	while(currElem != NULL){
		nextElem=My402ListNext(list, currElem);
		My402ListUnlink(list, currElem);
		currElem = nextElem;
	}
	list->anchor.next = NULL;
	list->anchor.prev = NULL;
}


        char buff[14];
        //printf("%d", balance);

        cents = balance%100;
        balance = balance/100;
        if(balance > 1000000){
            int beforeFirstComma = c/1000000;
            int afterFirstComma = c%1000000;
            //printf("%d\n", beforeFirstComma);
            //printf("%d\n", afterFirstComma);

            int beforeSecondComma = afterFirstComma/1000;
            int afterSecondComma = afterFirstComma%1000;
            //printf("%d\n", beforeSecondComma);
            //printf("%d\n", afterSecondComma);
            if(cents == 0){
            snprintf(buff, 14, "%d,%d,%d.00", beforeFirstComma, beforeSecondComma, afterSecondComma);
            }
            else{
                if(cents < 10){
                    snprintf(buff, 12, "%d,%d,%d.0%d", beforeFirstComma, beforeSecondComma, afterSecondComma, cents);
                }
                else{
                    snprintf(buff, 12, "%d,%d,%d.%d", beforeFirstComma, beforeSecondComma, afterSecondComma, cents);
                }
            }
        }
        else if (balance > 1000){
            int beforeSecondComma = balance/1000;
            int afterSecondComma = balance%1000;
            //printf("%d\n", beforeSecondComma);
            //printf("%d\n", afterSecondComma);
            if(cents == 0){
            snprintf(buff, 12, "%d,%d.00", beforeSecondComma, afterSecondComma);
            }
            else{
                if(cents<10){
                    snprintf(buff, 12, "%d,%d.0%d", beforeSecondComma, afterSecondComma, cents);
                }
                else{
                    snprintf(buff, 12, "%d,%d.%d", beforeSecondComma, afterSecondComma, cents);
                }
            }
        }
        else{
            if(cents == 0){
            snprintf(buff, 12, "%d.00", balance);
            }
            else{
                if(cents < 10){
                    snprintf(buff, 12, "%d.0%d", balance, cents);
                }
                else{
                    snprintf(buff, 12, "%d.%d", balance, cents);
                }
            }
        }

